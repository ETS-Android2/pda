{"version":3,"sources":["Scripts/utils/variablesRepo.ts","Scripts/utils/authentication.ts","Scripts/utils/globalHooks.ts","Scripts/pages/home.tsx","Scripts/pages/inventory.tsx","Scripts/utils/i18n.ts","Scripts/pages/signIn.tsx","Scripts/route.tsx","index.tsx"],"names":["NODE_SERVER","Authentication","signIn","username","password","a","fetch","method","headers","body","JSON","stringify","credentials","autoSignIn","Date","getTime","signOut","actions","setAuthUser","store","authUser","setState","state","setLoadPage","loadPage","useGlobal","globalHook","React","withRouter","withTranslation","globalActions","useState","inventoryRedirect","setRedirection","useEffect","to","Fragment","className","type","onClick","event","inventories","setInventories","globalState","then","wsRes","json","data","catch","action","noValidate","name","onChange","key","map","x","Code","Name","i18n","use","xhrBackend","initReactI18next","init","lng","fallbackLng","whitelist","debug","react","useSuspense","backend","loadPath","crossDomain","SignIn","props","usernameInput","hideInputMsg","hideFlag","handleChangeInput","target","value","handleUserInput","hideUserMsg","handlePwdInput","hidePwdMsg","handleSubmit","preventDefault","signInRes","t","authError","authHttpCode","ok","authSuccess","httpCode","status","console","log","current","focus","createRef","this","userInputClassName","classNames","pwdInputClassName","errSubmitClassName","location","from","pathname","src","process","alt","id","onSubmit","placeholder","ref","autoComplete","onFocus","onBlur","msgClass","msgText","getFullYear","Component","SignInInputMsg","Routing","window","cordova","AutoRouteBody","exact","path","initApp","ReactDOM","render","document","getElementById","err","alert","addEventListener"],"mappings":"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","file":"static/js/main.5bea3b80.chunk.js","sourcesContent":["export const NODE_SERVER = 'http://localhost:3030/',\r\n    RDX_AUTH_USER = 'RDX_AUTH_USER',\r\n    RDX_LOAD_PAGE = 'RDX_LOAD_PAGE';","import { NODE_SERVER } from './variablesRepo';\r\n\r\nexport default class Authentication {\r\n    static signIn = async (username, password) => {\r\n        return fetch(NODE_SERVER + 'Authentication/SignIn', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            }),\r\n            credentials: 'include'\r\n        });\r\n    }\r\n\r\n    static autoSignIn = async () => {\r\n        return fetch(NODE_SERVER + 'Authentication/AutoSignIn?timestamp=' + new Date().getTime(), {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n        });\r\n    }\r\n\r\n    static signOut = async () => {\r\n        return fetch(NODE_SERVER + 'Authentication/SignOut', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport globalHook, { Store } from 'use-global-hook';\r\n\r\ninterface GlobalState {\r\n    authUser: any;\r\n    loadPage: boolean;\r\n}\r\n\r\ninterface GlobalActions {\r\n    setAuthUser: (value: any) => void;\r\n    setLoadPage: (value: boolean) => void;\r\n}\r\n\r\nconst initState: GlobalState = {\r\n    authUser: null,\r\n    loadPage: true\r\n}\r\n\r\nconst actions = {\r\n    setAuthUser: (store: Store<GlobalState, GlobalActions>, authUser: any) => {\r\n        store.setState({ ...store.state, authUser });\r\n    },\r\n    setLoadPage: (store: Store<GlobalState, GlobalActions>, loadPage: boolean) => {\r\n        store.setState({ ...store.state, loadPage });\r\n    }\r\n}\r\n\r\nexport const useGlobal = globalHook<GlobalState, GlobalActions>(React, initState, actions);","import React, { useEffect, useState } from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { useGlobal } from '../utils/globalHooks';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nfunction Home() {\r\n    const [, globalActions] = useGlobal(),\r\n        [inventoryRedirect, setRedirection] = useState(false);\r\n\r\n    function handleButtonClick(event) {\r\n        setRedirection(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        globalActions.setLoadPage(false);\r\n    }, []);\r\n\r\n    if (inventoryRedirect) {\r\n        return <Redirect to='/Inventory' />;\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment>\r\n                <section className='famo-wrapper'>\r\n                    <div className='famo-content'>\r\n                        <div className='famo-grid'>\r\n                            <div className='famo-row'>\r\n                                <div className='famo-cell text-center'>\r\n                                    <button type='button' className='famo-button famo-normal-button' onClick={handleButtonClick}>\r\n                                        <span className='famo-text-5'>Inventário</span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withTranslation()(Home));","import React, { useEffect, useState } from 'react';\r\nimport { useGlobal } from '../utils/globalHooks';\r\nimport { NODE_SERVER } from '../utils/variablesRepo';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\ninterface ItemJournal {\r\n    Code: string;\r\n    Name: string;\r\n}\r\n\r\nfunction Inventory() {\r\n    const [inventories, setInventories] = useState<Array<ItemJournal>>([]),\r\n        [globalState, globalActions] = useGlobal(),\r\n        action = 'javascript:void(0)';\r\n\r\n    function handleSelectChange(event) {\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (globalState.authUser) {\r\n            fetch(NODE_SERVER + 'ERP/Inventories?timestamp=' + new Date().getTime(), {\r\n                method: 'GET',\r\n                credentials: 'include'\r\n            }).then((wsRes) => {\r\n                wsRes.json().then((data) => {\r\n                    setInventories(data);\r\n                    globalActions.setLoadPage(false);\r\n                });\r\n            }).catch(() => { });\r\n        }\r\n    }, [globalState.authUser]);\r\n\r\n    return (\r\n        <section className='famo-wrapper'>\r\n            <div className='famo-content'>\r\n                <form action={action} className='famo-grid famo-form-grid' noValidate>\r\n                    <div className='famo-row'>\r\n                        <div className='famo-cell famo-input-label'>\r\n                            <span className='famo-text-11'>Inventário</span>\r\n                        </div>\r\n                        <div className='famo-cell'>\r\n                            <select className='famo-input famo-text-10' name='inventoryCode' onChange={handleSelectChange}>\r\n                                <option key=''></option>\r\n                                {inventories.map((x) => {\r\n                                    return <option key={x.Code}>{x.Name}</option>\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default withRouter(withTranslation()(Inventory));","import i18n from 'i18next';\r\nimport xhrBackend from 'i18next-xhr-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n    .use(xhrBackend)\r\n    .use(initReactI18next)\r\n    .init({\r\n        lng: 'pt',\r\n        fallbackLng: 'pt',\r\n        whitelist: ['pt', 'en', 'es', 'fr'],\r\n        debug: false,\r\n        react: {\r\n            useSuspense: false\r\n        },\r\n        backend: {\r\n            loadPath: './JSON/i18n/{{lng}}.json?timestamp=' + new Date().getTime(),\r\n            crossDomain: true\r\n        }\r\n    });","import Authentication from '../utils/authentication';\r\nimport classNames from 'classnames';\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useGlobal } from '../utils/globalHooks';\r\nimport { withTranslation } from 'react-i18next';\r\nimport '../utils/i18n';\r\n\r\n// #region interface\r\ninterface SignInProps {\r\n    t: any;\r\n    location: any;\r\n}\r\n\r\ninterface SignInState {\r\n    username: string;\r\n    password: string;\r\n    hideUserMsg: boolean;\r\n    hidePwdMsg: boolean;\r\n    authSuccess: boolean;\r\n    authError: boolean;\r\n    authHttpCode: number;\r\n}\r\n\r\ninterface SignInInputMsgProps {\r\n    msgClass: string;\r\n    msgText: string;\r\n}\r\n// #endregion\r\n\r\n// #region class\r\nclass SignIn extends React.Component<SignInProps, SignInState> {\r\n    private usernameInput: React.RefObject<any>;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            hideUserMsg: true,\r\n            hidePwdMsg: true,\r\n            authSuccess: false,\r\n            authError: false,\r\n            authHttpCode: -1\r\n        };\r\n\r\n        this.usernameInput = React.createRef();\r\n    }\r\n\r\n    hideInputMsg = (hideFlag) => {\r\n        return 'signin-error-input' + (hideFlag ? ' hide' : '');\r\n    }\r\n\r\n    handleChangeInput = (event) => {\r\n        this.setState(({ [event.target.name]: event.target.value } as any));\r\n    }\r\n\r\n    handleUserInput = (event) => {\r\n        if (!event.target.value) {\r\n            this.setState({ hideUserMsg: event.type === 'blur' ? false : true });\r\n        }\r\n    }\r\n\r\n    handlePwdInput = (event) => {\r\n        if (!event.target.value) {\r\n            this.setState({ hidePwdMsg: event.type === 'blur' ? false : true });\r\n        }\r\n    }\r\n\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const [, globalActions] = useGlobal();\r\n\r\n        if (!this.state.username || !this.state.password) {\r\n            this.setState({ hideUserMsg: this.state.username ? true : false, hidePwdMsg: this.state.password ? true : false });\r\n        }\r\n        else {\r\n            const signInRes = await Authentication.signIn(this.state.username, this.state.password),\r\n                { t } = this.props;\r\n\r\n            this.setState({ authError: false, authHttpCode: -1 });\r\n\r\n            if (signInRes.ok) {\r\n                this.setState({ authSuccess: true });\r\n                globalActions.setAuthUser(await signInRes.json());\r\n            }\r\n            else {\r\n                const httpCode = signInRes.status;\r\n\r\n                if (httpCode !== 400 && httpCode !== 500) {\r\n                    console.log(t('key_416') + ' - ' + httpCode);\r\n                }\r\n\r\n                this.usernameInput.current.focus();\r\n                this.setState({ password: '', hidePwdMsg: true, authError: true, authHttpCode: httpCode });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.usernameInput.current.focus();\r\n    }\r\n\r\n    render() {\r\n        const famoLogo = process.env.REACT_APP_CODE_URL + '/Content/Images/logo-famo-black-normal.png',\r\n            inputClassName = 'famo-input signin-form-input famo-text-3',\r\n            userInputClassName = classNames(inputClassName, { 'famo-input-error': !this.state.hideUserMsg }),\r\n            pwdInputClassName = classNames(inputClassName, { 'famo-input-error': !this.state.hidePwdMsg }),\r\n            errSubmitClassName = classNames('signin-error-submit', { 'hide': !this.state.authError }),\r\n            { t, location } = this.props;\r\n\r\n        if (this.state.authSuccess) {\r\n            return <Redirect to={location.state || { from: { pathname: '/' } }} />;\r\n        }\r\n\r\n        return (\r\n            <section className='famo-grid signin'>\r\n                <div className='famo-row'>\r\n                    <div className='famo-cell'>\r\n                        <div className='signin-body'>\r\n                            <div className='signin-famo-logo'>\r\n                                <img src={famoLogo} alt='FAMO' />\r\n                            </div>\r\n                            <div className='signin-form'>\r\n                                <div className='signin-app-name'>\r\n                                    <span className='famo-text-2'>{process.env.REACT_APP_NAME}</span>\r\n                                </div>\r\n                                <form id='signin-form' method='POST' onSubmit={this.handleSubmit}>\r\n                                    <div className='signin-input-wrapper'>\r\n                                        <input type='text' id='signin-username-input' className={userInputClassName} placeholder={t('key_397')} ref={this.usernameInput} name='username' value={this.state.username} autoComplete='off' onChange={this.handleChangeInput} onFocus={this.handleUserInput} onBlur={this.handleUserInput} />\r\n                                        <SignInInputMsg msgClass={this.hideInputMsg(this.state.hideUserMsg)} msgText={t('key_196')} />\r\n                                    </div>\r\n                                    <div className='signin-input-wrapper'>\r\n                                        <input type='password' id='signin-password-input' className={pwdInputClassName} placeholder={t('key_314')} name='password' value={this.state.password} onChange={this.handleChangeInput} onFocus={this.handlePwdInput} onBlur={this.handlePwdInput} />\r\n                                        <SignInInputMsg msgClass={this.hideInputMsg(this.state.hidePwdMsg)} msgText={t('key_195')} />\r\n                                    </div>\r\n                                    <div className={errSubmitClassName}>\r\n                                        {this.state.authError && this.state.authHttpCode === 400 && <span className='famo-text-7'>{t('key_398')}</span>}\r\n                                        {this.state.authError && this.state.authHttpCode === 500 && <span className='famo-text-7'>{t('key_306')}</span>}\r\n                                    </div>\r\n                                    <button className='famo-button famo-confirm-button signin-button-submit' type='submit'>\r\n                                        <span className='famo-text-5'>{t('key_238')}</span>\r\n                                    </button>\r\n                                    <button type='button' className='famo-button famo-transparent-button signup-button'>\r\n                                        <span className='famo-text-27'>{t('key_648')}</span>\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='famo-row'>\r\n                    <div className='famo-cell famo-cell-bottom'>\r\n                        <div className='signin-footer text-center'>\r\n                            <span className='famo-text-1'>{new Date().getFullYear()} &copy; FAMO - {process.env.REACT_APP_NAME}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nclass SignInInputMsg extends React.Component<SignInInputMsgProps, any> {\r\n    render() {\r\n        const { msgClass, msgText } = this.props;\r\n\r\n        return (\r\n            <div className={msgClass}>\r\n                <span className='famo-text-7'>{msgText}</span>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default withTranslation()(SignIn as any);\r\n// #endregion","import Authentication from './utils/authentication';\r\nimport Home from './pages/home';\r\nimport Inventory from './pages/inventory';\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SignIn from './pages/signIn';\r\nimport { BrowserRouter, HashRouter, Route, Redirect, Switch } from 'react-router-dom';\r\nimport { useGlobal } from './utils/globalHooks';\r\nimport '../Content/style.css';\r\n\r\ninterface AutoRouteBodyState {\r\n    isAuthenticated: boolean;\r\n}\r\n\r\nexport default function Routing() {\r\n    if (!(window as any).cordova) {\r\n        return (\r\n            <BrowserRouter>\r\n                <AutoRouteBody />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <HashRouter>\r\n                <AutoRouteBody />\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RouteBody() {\r\n    const [globalState, ] = useGlobal();\r\n\r\n    return (\r\n        <Switch>\r\n            <PrivateRoute exact path='/' component={Home} />\r\n            <Route exact path='/SignIn' render={(routeProps) => {\r\n                return globalState.authUser ? (<Redirect to={{ pathname: '/' }} />) : (<SignIn {...routeProps} />);\r\n            }} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    const [globalState, ] = useGlobal();\r\n\r\n    return (\r\n        <Route\r\n            render={routeProps => {\r\n                return globalState.authUser ? (\r\n                    <Component {...routeProps} />\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/SignIn',\r\n                                state: { from: routeProps.location }\r\n                            }}\r\n                        />\r\n                    );\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    component: PropTypes.elementType\r\n};\r\n\r\nfunction AutoRouteBody() {\r\n    const [globalState, globalActions] = useGlobal();\r\n\r\n    useEffect(() => {\r\n        Authentication.autoSignIn().then((wsRes) => {\r\n            wsRes.json().then((data) => {\r\n                globalActions.setAuthUser(data);\r\n            })\r\n        }).catch(() => { });\r\n    }, []);\r\n\r\n    return (\r\n        <section className='famo-body'>\r\n            <div className={'pda-app-loader' + (globalState.authUser && !globalState.loadPage ? ' hide' : '')}>\r\n                <div className=\"famo-loader\"></div>\r\n            </div>\r\n            <Switch>\r\n                <Route exact path='/'>\r\n                    <Home />\r\n                </Route>\r\n                <Route path='/Inventory'>\r\n                    <Inventory />\r\n                </Route>\r\n            </Switch>\r\n        </section>\r\n    );\r\n}","import httpStatus from 'http-status';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Routing from './Scripts/route';\r\n\r\nasync function initApp() {\r\n    try {\r\n        // const sessionRes = await fetch(NODE_SERVER + 'Authentication/Session/User', {\r\n        //     method: 'GET',\r\n        //     credentials: 'include'\r\n        // });\r\n\r\n        // if (sessionRes.ok && sessionRes.status === httpStatus.OK) {\r\n        //     store.dispatch(setAuthUser(await sessionRes.json()));\r\n        // }\r\n\r\n        ReactDOM.render(<Routing />, document.getElementById('root'));\r\n    }\r\n    catch (err) {\r\n        alert('Oops!! Liga o servidor Node.js!');\r\n    }\r\n}\r\n\r\nif (!(window as any).cordova) {\r\n    initApp();\r\n}\r\nelse {\r\n    document.addEventListener('deviceready', initApp, false);\r\n}"],"sourceRoot":""}