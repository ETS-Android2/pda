{"version":3,"file":"erp.js","sourceRoot":"","sources":["../../src/controllers/erp.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,sDAA8B;AAC9B,uDAA+B;AAC/B,wCAA0C;AAC1C,0DAAiD;AAEjD,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;IAC9C,eAAK,CAAC,gBAAS,CAAC;QACZ,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,uBAAO,GAAG,0BAA0B;KAC5C,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAClC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACf,aAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;IAC3C,eAAK,CAAC,gBAAS,CAAC;QACZ,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,uBAAO,GAAG,oCAAoC,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW;KAC9E,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAClC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACf,aAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC3B,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import axios from 'axios';\r\nimport express from 'express';\r\nimport Log from '../utils/log';\r\nimport { Authorize } from '../utils/http';\r\nimport { WEB_API } from '../utils/variablesRepo';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/Inventories', (req: any, res: any) => {\r\n    axios(Authorize({\r\n        method: 'GET',\r\n        url: WEB_API + 'api/Navision/Inventories'\r\n    }, req.session.token)).then((wsRes) => {\r\n        res.send(wsRes.data);\r\n    }).catch((wsErr) => {\r\n        Log.addPromiseError(wsErr);\r\n        res.status(wsErr.response.status).send();\r\n    });\r\n});\r\n\r\nrouter.get('/Products', (req: any, res: any) => {\r\n    axios(Authorize({\r\n        method: 'GET',\r\n        url: WEB_API + 'api/Navision/Products?productCode=' + req.query.productCode\r\n    }, req.session.token)).then((wsRes) => {\r\n        res.send(wsRes.data);\r\n    }).catch((wsErr) => {\r\n        Log.addPromiseError(wsErr);\r\n        res.status(wsErr.response.status).send();\r\n    });\r\n});\r\n\r\nexport default router;"]}