{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/utils/log.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport moment from 'moment';\r\nimport { LOG_DATETIME_FORMAT, LOG_FOLDER } from './variablesRepo';\r\n\r\ninterface HttpLogData {\r\n    method: string;\r\n    url: string;\r\n    statusCode: number;\r\n};\r\n\r\nexport default class Log {\r\n    public static error(errorMsg: string, errorStack: string = null, httpData: HttpLogData = null, subFolder = 'errors/server/') {\r\n        const folder = LOG_FOLDER + subFolder,\r\n            logFile = folder + moment().format('DD_MM_YYYY') + '.log',\r\n            message = 'Date: ' + moment().format(LOG_DATETIME_FORMAT) + '\\n'\r\n                + 'Message: ' + errorMsg + '\\n'\r\n                + (errorStack ? 'Stack: ' + errorStack + '\\n' : '')\r\n                + (httpData ? ('Method: ' + httpData.method + '\\n'\r\n                    + 'Url: ' + httpData.url + '\\n'\r\n                    + 'StatusCode: ' + httpData.statusCode + '\\n\\n') : '\\n');\r\n\r\n        if (!fs.existsSync(folder)) {\r\n            fs.mkdirSync(folder, { recursive: true });\r\n        }\r\n\r\n        fs.appendFile(logFile, message, (err: any) => {\r\n            if (err) {\r\n                console.log('[' + moment().format(LOG_DATETIME_FORMAT) + '] ' + err + '\\n\\n');\r\n            }\r\n        });\r\n    }\r\n\r\n    public static promiseError(error: any, subFolder = 'errors/server/') {\r\n        this.error(error.message,\r\n            error.stack,\r\n            error.request && error.response ? { method: error.request.method, url: error.request.path, statusCode: error.response.status } : null,\r\n            subFolder);\r\n    }\r\n\r\n    public static externalPromiseError(appName: string, error: any) {\r\n        this.promiseError(error, 'errors/' + appName + '/');\r\n    }\r\n\r\n    public static externalHttpError(appName: string, res: any) {\r\n        const folder = LOG_FOLDER + 'errors/' + appName + '/',\r\n            logFile = folder + moment().format('DD_MM_YYYY') + '.log',\r\n            message = ('Date: ' + moment().format(LOG_DATETIME_FORMAT) + '\\n'\r\n                + 'Message: ' + res.statusText + ' (' + res.status + ')' + '\\n'\r\n                + 'Url: ' + res.url + '\\n\\n');\r\n\r\n        if (!fs.existsSync(folder)) {\r\n            fs.mkdirSync(folder, { recursive: true });\r\n        }\r\n\r\n        fs.appendFile(logFile, message, (err: any) => {\r\n            if (err) {\r\n                console.log('[' + moment().format(LOG_DATETIME_FORMAT) + '] ' + err + '\\n\\n');\r\n            }\r\n        });\r\n    }\r\n\r\n    public static tracking(req: any) {\r\n        const trackingFolder = LOG_FOLDER + 'tracking/',\r\n            logFile = trackingFolder + moment().format('DD_MM_YYYY') + '.log',\r\n            message = moment().format(LOG_DATETIME_FORMAT) + ' '\r\n                + req.ip.padEnd(25) + ' '\r\n                + req.hostname.padEnd(20) + ' '\r\n                + req.httpVersion.padEnd(5) + ' '\r\n                + req.method.padEnd(5) + ' '\r\n                + (req.session.authUser ? ' ' + req.session.authUser.Username : '').padEnd(32) + ' '\r\n                + req.url\r\n                + '\\n';\r\n\r\n        if (!fs.existsSync(trackingFolder)) {\r\n            fs.mkdirSync(trackingFolder, { recursive: true });\r\n        }\r\n\r\n        fs.appendFile(logFile, message, (err: any) => {\r\n            if (err) {\r\n                console.log('[' + moment().format(LOG_DATETIME_FORMAT) + '] ' + err + '\\n\\n');\r\n            }\r\n        });\r\n    }\r\n}"]}